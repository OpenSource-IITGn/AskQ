type Mutation {
  signUp(
    email: String!
    password: String!
    userName: String!
  ): SignUpResponse!
  signIn(email: String!, password: String!): SignInResponse!
  changePassword(password: String!): ChangePasswordResponse!
  changeProfile(userName: String, firstName: String, lastName: String, avatar: String): ChangeProfileResponse!
  createPost(type: PostType, title: String, body: String!, tags: [String]): CreatePostResponse!
  updatePost(pid: Int!, title: String, body: String!, tags: [String]): UpdatePostResponse!
  createComment(pid: Int!, body: String!): CreateCommentResponse!
  updateComment(cid: Int!, body: String!): UpdateCommentResponse!
}


type UpdateCommentResponse {
  ok: Boolean!
  error: String
  post: Comment
}


type CreateCommentResponse {
  ok: Boolean!
  error: String
  post: Comment
}


type UpdatePostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type CreatePostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type SignUpResponse {
  ok: Boolean!
  error: String
  user: User
}

type SignInResponse {
  ok: Boolean!
  error: String
  token: String
}

type ChangePasswordResponse {
  ok: Boolean!
  error: String
  user: User
}

type ChangeProfileResponse {
  ok: Boolean!
  error: String
  user: User
}
# Base user type
type User {
  id: ID!
  email: String!
  password: String!
  username: String!
  firstname: String!
  lastname: String
  avatar: String
  createdAt: String!
  updatedAt: String!
}

# Type Comment
type Comment {
	id: ID!
	postId: Int!
	user: User
	body: String!
	createdAt: String!
	updatedAt: String!
}

# A post can be Answer or Question
enum PostType {
	Answer
	Question
}

# Post Type
type Post {
	id: ID!
	type: PostType!
	user: User
	body: String!
	vote: Int!
	comments: [Comment]
	title: String
	tags: [String]
	answers: [Post]
	createdAt: String!
	updatedAt: String!
}

# Query
type Query {
	getMyProfile: GetMyProfileResponse!
	getPosts(query: String, first: Int!, offset: Int!, user: Int!): GetPosts!
	getQuestions(query: String, first: Int!, offset: Int!, user: Int!): GetPosts!
	getAnswers(query: String, first: Int!, offset: Int!, user: Int!): GetPosts!
	getPostDetailsByID(pid: Int!): GetPost!
}

type GetPost {
	ok: Boolean!
	error: String
	post: Post
}

# Response for all requests is same
type GetPosts {
	ok: Boolean!
	error: String
	posts: [Post]
}

# Get profile
type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
}